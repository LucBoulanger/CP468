import mapping
class Node():
    def __init__(self, parent=None, position=None):
        self.parent = parent
        self.position = position
        self.totCost = 0
        self.currTostartPos = 0
        self.currToEnd = 0
        
    def __eq__(self, other):
        return self.position == other.position

def astar(mapp, startPos, endPos):
    
    startPos_node = Node(None, startPos)
    startPos_node.currTostartPos = startPos_node.currToEnd = startPos_node.totCost = 0
    end_node = Node(None, endPos)
    end_node.currTostartPos = end_node.currToEnd = end_node.totCost = 0
    possibleMoves = []
    pathTaken = []
    possibleMoves.append(startPos_node)

    while len(possibleMoves) > 0:
        current_node = possibleMoves[0]
        current_index = 0
        for index, item in enumerate(possibleMoves):
            if item.totCost < current_node.totCost:
                current_node = item
                current_index = index
                
        possibleMoves.pop(current_index)
        pathTaken.append(current_node)

        if current_node == end_node:
            path = []
            current = current_node
            while current is not None:
                path.append(current.position)
                current = current.parent
            return path[::-1]

        children = []
        for new_position in [(0, -1), (0, 1), (-1, 0), (1, 0)]:
            
            node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1])
            if node_position[0] > (len(mapp.map) - 1) or node_position[0] < 0 or node_position[1] > (len(mapp.map[len(mapp.map)-1]) -1) or node_position[1] < 0:
                continue
            if mapp.map[node_position[0]][node_position[1]] != 0:
                continue

            new_node = Node(current_node, node_position)
            children.append(new_node)

        for child in children:
            for closed_child in pathTaken:
                if child == closed_child:
                    continue
            child.currTostartPos = current_node.currTostartPos + 1
            child.currToEnd = ((child.position[0] - end_node.position[0]) ** 2) + ((child.position[1] - end_node.position[1]) ** 2)
            child.totCost = child.currTostartPos + child.currToEnd

            for open_node in possibleMoves:
                if child == open_node and child.currTostartPos > open_node.currTostartPos:
                    continue
                  
            possibleMoves.append(child)

def main():
    data = open("test.txt", "r")
    mapp = mapping.Map(data)
    
    startPos = tuple(mapp.robots[0])
    endPos = tuple(mapp.goal)
    print("start: ",startPos)
    print("end: ",endPos)
    path = astar(mapp, startPos, endPos)
    print(path)
    
    data.close()


if __name__ == '__main__':
    main()
